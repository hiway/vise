# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
# noqa: eol-semicolon
from __python__ import hash_literals, bound_methods

from communicate import connect_signal, js_to_python
from elementmaker import E
from utils import is_visible
from frames import broadcast_action, send_action, register_subframe_handler, register_top_handler, frame_iter

REPLACED_ELEM_TAG = 'vise-replaced-elem-hint'
ATTR = 'data-vise-hint'
current_request = {'id':0, 'accumulated_keypresses':[]}

def start_follow_link(action):
    frames = list(frame_iter(window.top, is_visible))
    current_request.num_left = frames.length
    current_request.action = action
    current_request.id += 1
    current_request.hint_groups = []
    current_request.accumulated_keypresses = []
    current_request.marking_done = False
    has_frames = current_request.num_left > 0
    if has_frames:
        broadcast_action(frames, 'find_hints', current_request.action, current_request.id)
    current_request.hint_groups.push(mark_visible_hints(current_request.action))
    if not has_frames:
        assign_hints()

register_subframe_handler(def find_hints(current_frame_id, source_frame_id, source_frame, action, request_id):
    hints = mark_visible_hints(action, current_frame_id)
    send_action(source_frame, 'report_marked_hints', request_id, hints)
)

register_top_handler(def report_marked_hints(current_frame_id, source_frame_id, source_frame, request_id, hints):
    if request_id is not current_request.id:
        return
    current_request.num_left -= 1
    current_request.hint_groups.push(hints)
    if current_request.num_left < 1:
        assign_hints()
)


def add_hint_markup(elem, i):
    tname = elem.tagName.toLowerCase()
    if tname is 'input' or tname is 'textarea':
        e = document.createElement(REPLACED_ELEM_TAG)
        elem.parentNode.insertBefore(e, elem)
        elem = e
    elem.setAttribute(ATTR, i)

def remove_hint_markup(elem):
    tname = elem.tagName.toLowerCase()
    if tname is 'input' or tname is 'textarea':
        ps = elem.previousSibling?.tagName
        if ps and ps.toLowerCase() is REPLACED_ELEM_TAG:
            elem.previousSibling.parentNode.removeChild(elem.previousSibling)
    else:
        elem.removeAttribute(ATTR)
        if elem.tagName.toLowerCase() is REPLACED_ELEM_TAG:
            elem.parentNode.removeChild(elem)

def mark_visible_hints(action, frame_id=0):
    hints = v'[]'
    sel = 'a[href], button, input, textarea'
    if action is 'copy':
        sel = 'a[href]'
    for i, elem in enumerate(document.querySelectorAll(sel)):
        if is_visible(elem):
            add_hint_markup(elem, i)
            br = elem.getBoundingClientRect()
            hints.push({'frame_id':frame_id, 'num':i, 'left':br.left, 'top':br.top})
        else:
            remove_hint_markup(elem)
    return hints

def assign_hints():
    all_hints = v'[]'
    for hg in current_request.hint_groups:
        all_hints = all_hints.concat(hg)
    hint_groups = {}
    current_request.all_hints = sorted(all_hints, key=def (h): v'[h.y, h.x]';)
    for i, hint in enumerate(current_request.all_hints):
        i = i.toString(36).toLowerCase()
        fid = hint.frame_id
        if not hint_groups[fid]:
            hint_groups[fid] = {}
        hint_groups[fid][hint.num] = hint.num = hint.text_left = i
    for frame_id in hint_groups:
        frame_id = int(frame_id)
        if frame_id is 0:
            update_hint_numbers(hint_groups[frame_id])
        else:
            send_action(frame_id, 'hints_assigned', hint_groups[frame_id])
    current_request.marking_done = True
    for text in current_request.accumulated_keypresses:
        follow_link(text)

def update_hint_numbers(hint_map):
    for elem in document.querySelectorAll('[' + ATTR + ']'):
        newnum = hint_map[elem.getAttribute(ATTR)]
        if newnum?:
            elem.setAttribute(ATTR, newnum)
        else:
            remove_hint_markup(elem)

register_subframe_handler(def hints_assigned(current_frame_id, source_frame_id, source_frame, hints):
    update_hint_numbers(hints)
)


def follow_link(text):
    if not current_request.marking_done:
        current_request.accumulated_keypresses.push(text)
        return
    text = text.toLowerCase()
    if text is '|escape':
        predicate = def():
            return False
    elif text is '|enter':
        predicate = def(hint):
            return hint is current_request.all_hints[0]
    else:
        predicate = def(hint):
            if hint.text_left.startsWith(text):
                hint.text_left = hint.text_left[text.length:]
                return True
            return False
    hint_groups = {}
    all_hints = v'[]'
    for i, hint in enumerate(current_request.all_hints):
        if predicate(hint):
            hint.matched = True
            all_hints.push(hint)
        else:
            hint.matched = False
        fid = hint.frame_id
        if not hint_groups[fid]:
            hint_groups[fid] = v'[]'
        hint_groups[fid].push(hint)
    if not all_hints.length:
        js_to_python('link_followed', False, text)
        if text is not '|escape':
            return  # no match inform the user and stay in follow mode
    if all_hints.length == 1:
        js_to_python('link_followed', True, text)

    for frame_id in hint_groups:
        frame_id = int(frame_id)
        if frame_id is 0:
            update_filtered_hints(hint_groups[frame_id], all_hints.length is 1)
        else:
            send_action(frame_id, 'hints_filtered', hint_groups[frame_id], all_hints.length is 1)
    for hint in all_hints:
        hint.num = hint.text_left
    current_request.all_hints = all_hints

def update_filtered_hints(hints, found_target):
    elem_map = {e.getAttribute(ATTR):e for e in document.querySelectorAll('[' + ATTR + ']')}
    target_elem = None
    for hint in hints:
        elem = elem_map[hint.num]
        if elem:
            if hint.matched:
                elem.setAttribute(ATTR, hint.text_left)
                if found_target:
                    target_elem = elem
            else:
                remove_hint_markup(elem)
    if target_elem is not None:
        if target_elem.tagName.toLowerCase() is REPLACED_ELEM_TAG:
            target_elem = target_elem.nextSibling
        remove_hint_markup(target_elem)
        activate_elem(target_elem)


def animate_click(elem):
    elem.classList.add('vise-animate-click')
    action = current_request.action
    if action is not 'sametab' and action is not 'copy':
        js_to_python('middle_click_soon')
    window.setTimeout(def():
        elem.classList.remove('vise-animate-click')
        if action is 'sametab':
            elem.click()
        elif action is 'copy':
            js_to_python('copy_to_clipboard', elem.href)
        else:
            mc = new MouseEvent("click", {'button': 1, 'buttons': 4})
            elem.dispatchEvent(mc)
    , 300)

def activate_elem(elem):
    tname = elem.tagName.toLowerCase()
    if tname is 'a' or tname is 'button':
        if tname is 'a':
            animate_click(elem)
        else:
            elem.click()
    else:
        elem.focus()

register_subframe_handler(def hints_filtered(current_frame_id, source_frame_id, source_frame, hints, found_target):
    update_filtered_hints(hints, found_target)
)



def onload():
    if not document.body:
        return
    document.body.appendChild(E.style('''
    [ATTRN]:before {
        content: attr(ATTRN);
        text-decoration: none !important;
        display: inline-block !important;
        font-family: monospace;
        font-weight: bold !important;
        color: HINT_FOREGROUND !important;
        background: HINT_BACKGROUND !important;
        font-size: HINT_FONT_SIZEpx !important;
        cursor: default !important;
        padding: 1px !important;
        border: solid 1px currentColor !important;
        position: absolute !important;
    }

    [ATTRN='']:before {
        content: "\xa0";
        background: SELECTED_HINT_BACKGROUND !important;
    }

    a.vise-animate-click {
        display: inline-block;
        transform: scale(2);
    }

    '''.replace(/ATTRN/g, ATTR)))
    if window.self is window.top:
        connect_signal('start_follow_link', start_follow_link)
        connect_signal('follow_link', follow_link)
